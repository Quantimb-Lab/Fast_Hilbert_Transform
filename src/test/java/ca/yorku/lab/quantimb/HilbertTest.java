  /**
  * Copyright 2021 Quantimb Lab
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *
  * See the License for the specific language governing permissions and limitations under the License.
  *
  */

package ca.yorku.lab.quantimb;

import org.junit.Assert;
import org.junit.Test;

public class HilbertTest {

    private double[] signal_even = {0.11348847, 0.97448309, 0.72873463, 0.35146781, 0.70760514, 0.7996046,
            0.64556185, 0.41459961, 0.70603101, 0.24664938, 0.25599243, 0.02401135,
            0.09872595, 0.30043644, 0.64085568, 0.32220795, 0.18549414, 0.91719355,
            0.2709208,  0.27354789, 0.95441268, 0.12711457, 0.74726485, 0.00523796,
            0.85679061, 0.6959562, 0.5530257, 0.9352358, 0.51262353, 0.17761207,
            0.53686579, 0.29345982, 0.01060205, 0.88380072, 0.65641065, 0.94225597,
            0.7449453,  0.26721045, 0.36186288, 0.52640389, 0.54688497, 0.25867032,
            0.17463635, 0.36071026, 0.14018227, 0.38907866, 0.47188833, 0.96882692,
            0.14556745, 0.51425472, 0.52765183, 0.30524252, 0.15967476, 0.59691153,
            0.10372881, 0.56796609, 0.38630638, 0.08472205, 0.56199918, 0.64807168,
            0.66193395, 0.18924281, 0.95410895, 0.05902446, 0.88020624, 0.78375816,
            0.25247741, 0.92709052, 0.4447506, 0.37715133, 0.89382348, 0.75405387,
            0.77445802, 0.87904851, 0.48148232, 0.30290073, 0.44292787, 0.52813285,
            0.60814462, 0.52524497, 0.97796815, 0.60203988, 0.83529596, 0.08537584,
            0.48829082, 0.90031302, 0.91705588, 0.21688352, 0.40062124, 0.54517216,
            0.64192219, 0.47363051, 0.56357413, 0.58928365, 0.31358832, 0.75801858,
            0.85716649, 0.47649792, 0.86313715, 0.66091439};


    private double[] signal_even_O = {0.3734294, 0.46854066, 0.36919454, 0.03085569, -0.26727167, -0.4886012,
            -0.06953118, -0.09764864, 0.02267467, -0.0216082, 0.05535647, 0.04338602,
            0.26089558, 0.21237457, 0.1196821, -0.07390823, -0.21092497, 0.47385524,
            -0.16622595, -0.28119894, -0.43419161, 0.48287055, -0.37214429, -0.17786921,
            -0.42905716, -0.27523006, -0.10636509, 0.396145, -0.15453839, 0.48474944,
            -0.47126795, -0.14831526, -0.11904111, 0.26416013, 0.43880391, -0.1803102,
            -0.06752407, -0.22985426, 0.30105589, 0.13823881, -0.43130987, 0.10364448,
            0.29557456, -0.46799184, -0.04455218, 0.29017254, 0.48859652, 0.08396454,
            -0.4610877, -0.05357709, -0.31182748, 0.12705565, -0.2846822, -0.34902989,
            0.03614431, -0.39961321, 0.23115843, 0.43965104, 0.44331818, -0.12526149,
            0.09575025, 0.16198271, 0.01058046, -0.02910742, -0.49112771, -0.4321036,
            -0.06518377, -0.06850637, -0.31411631,  0.02970532, 0.09908625, 0.22092447,
            -0.19360414, -0.09560454, 0.32278242, 0.08713035, 0.20651554, 0.01058225,
            0.33006166, 0.22067801, 0.36626168, -0.29659023, -0.20146515, -0.02419598,
            -0.0063955, 0.10767613, 0.31893558, 0.02772384, 0.43920414, 0.22338341,
            -0.32124298,  0.11972542, 0.06228338, 0.26340461, 0.30664634, -0.2013748,
            -0.36161529, 0.13539791, -0.49169163, 0.28858326};


    private double[] signal_odd = {0.91910903, 0.6421956, 0.75371223, 0.13931457, 0.08731955, 0.78800206,
            0.32615094, 0.54106782, 0.24023518, 0.54542293, 0.4005545, 0.71519189,
            0.83667994, 0.58848114, 0.29615456, 0.28101769, 0.70559724, 0.42259643,
            0.05731599, 0.74702731, 0.45231301, 0.17577474, 0.049377, 0.29247534,
            0.06679913, 0.75115649, 0.06377152, 0.43190832, 0.36417241, 0.15197153,
            0.54671034, 0.44329304, 0.03606131, 0.82289319, 0.27329268, 0.16898522,
            0.64436975, 0.10754108, 0.3532451, 0.38570366, 0.44555591, 0.97705266,
            0.72939401, 0.31223506, 0.89475524, 0.7832736, 0.26200034, 0.30948319,
            0.12945063, 0.42217136, 0.93976503, 0.36704287, 0.43477497, 0.91709355,
            0.94729392, 0.25477295, 0.70970358, 0.0499764, 0.13474393, 0.50650594,
            0.5890721, 0.32689861, 0.14481445, 0.25763849, 0.85744589, 0.68397375,
            0.9986326, 0.31945567, 0.45340823, 0.86762218, 0.63852218, 0.3318923,
            0.54197763, 0.11232381, 0.81652344, 0.22093165, 0.51497427, 0.52608777,
            0.27708869, 0.90442063, 0.420427, 0.9490145, 0.78647118, 0.4815469,
            0.01192155, 0.05972078, 0.82571775, 0.40463699, 0.05315311, 0.25963905,
            0.28115066, 0.94330304, 0.89362936, 0.20228927, 0.10036081, 0.57304307,
            0.74537737, 0.60076048, 0.90923954, 0.93857776, 0.5615661};


    private double[] signal_odd_O = {0.14268992, 0.03862093, 0.01189798, 0.11025723, -0.00701102, -0.285538,
            -0.25601998, 0.07209453, 0.27262866, -0.18937205, -0.09591683, 0.09680005,
            -0.25856523, 0.40571984, -0.34078816, 0.08866368, -0.23802843, 0.37633972,
            0.41907543, -0.3950271, 0.47068111, -0.45657264, -0.46595615, 0.03258087,
            -0.47254545, -0.16250299, -0.30666404, -0.23131998, 0.47687323, 0.44716556,
            0.3198855, 0.15522504, -0.44456855, 0.18916085, 0.13678542, 0.10277588,
            -0.37855792, -0.28712877, 0.00743807, -0.02340178, -0.41858782, -0.14299246,
            0.23319608, 0.23114294, -0.38195915, -0.45789104, -0.18114502, 0.33876315,
            0.1078791, -0.42284151, -0.23427488, 0.08641161, -0.07606502, 0.13463859,
            -0.44880682, 0.08592357, 0.46398126, -0.49444425, 0.18848625, 0.39796667,
            0.293007, 0.16458931, 0.30919566, -0.33821151, -0.24529274, 0.0008957,
            0.42789037, 0.00288515, -0.30442061, 0.17356501, -0.18246241, 0.28998095,
            0.24393396, -0.35401717, 0.29082579, -0.06643027, 0.3811873, 0.07208351,
            0.48961474, -0.0817506, -0.14481162, 0.03393484, -0.23950087, -0.09413867,
            0.11391071, -0.22384067, 0.07416591, 0.41295602, -0.11371163, -0.47285529,
            -0.09394305, 0.23936455, -0.03627387, 0.48071535, 0.02205551, 0.07275601,
            0.48345016, -0.28922798, -0.30490668, 0.46623021, -0.07115906};


    /**
     * Tests the amplitude envelope detection of a signal with an even number of elements (float elements between 0 and 1) using Hilbert Transform.
     */
    @Test
    public void testHilbertEven() {
        double[] result_even = {0.15059953, 1.01307331, 0.87449853, 0.35294732, 0.70796261, 0.81265174,
                0.78926146, 0.44737748, 0.7954988,  0.53523158, 0.37282597, 0.21554339,
                0.17244427, 0.40080683, 0.65214998, 0.38746577, 0.40312225, 0.93283284,
                0.50129406, 0.61844984, 0.97037425, 0.12782931, 0.74835965, 0.01508009,
                1.05121474, 0.76704996, 0.61618168, 0.95981823, 0.64687379, 0.2575904,
                0.55569837, 0.49336439, 0.48613716, 0.94408691, 0.65866183, 0.94244226,
                0.88524284, 0.43012802, 0.36212373, 0.5327492, 0.57757279, 0.44091339,
                0.19092686, 0.37321759, 0.20125084, 0.42922305, 0.61907171, 0.97655901,
                0.30953886, 0.572799, 0.56114828, 0.32917163, 0.20298079, 0.60899968,
                0.12783523, 0.72076968, 0.49258433, 0.45637364, 0.63239939, 0.75757429,
                0.69609029, 0.44516487, 0.9564406, 0.06768099, 1.09797838, 0.85417849,
                0.36616514, 0.94845452, 0.50014103, 0.55747463, 0.92625363, 0.75415447,
                0.77578762, 0.89409675, 0.63147986, 0.30387079, 0.44468183, 0.57707944,
                0.60876432, 0.61966325, 0.97830985, 0.60605247, 0.88346529, 0.26109377,
                0.65782917, 0.9106485,  0.97925424, 0.43078387, 0.44139737, 0.54579707,
                0.64312109, 0.48755273, 0.58113486, 0.60987723, 0.34099405, 0.81827228,
                0.86927186, 0.48174188, 0.8691028, 0.84114969};

        final double[] hilbertTransform_even = Hilbert.computeHilbertTransform(signal_even);
        final double[] amplitudeEnvelope_even = Hilbert.computeSignalEnvelope(hilbertTransform_even);
        Assert.assertArrayEquals(result_even, amplitudeEnvelope_even, 0.0000001);

    }


    /**
     * Tests the amplitude envelope detection of a signal with an even number of elements (float elements between -0.5 and 0.5) using Hilbert Transform.
     */
    @Test
    public void testHilbertEvenO() {
        double[] result_even_O = {0.37489736, 0.46858585, 0.58570371, 0.48471169, 0.54328203, 0.48860376,
                0.19671918, 0.10031255, 0.13962739, 0.02357962, 0.15394664, 0.04723776,
                0.30939913, 0.35436282, 0.14651557, 0.46262551, 0.36215961, 0.5345759,
                0.43644053, 0.44339311, 0.55808642, 0.48843598, 0.55906375, 0.17789725,
                0.4330048, 0.38579126, 0.47598708, 0.40272572, 0.16064902, 0.48568378,
                0.66850181, 0.47634671, 0.12511975, 0.61500261, 0.59361974, 0.22055713,
                0.14980852, 0.30877707, 0.34588357, 0.37640546, 0.44007558, 0.45942565,
                0.45802854, 0.47694949, 0.42534856, 0.36163597, 0.49979411, 0.6449365,
                0.48477316, 0.05411881, 0.31224698, 0.19424353, 0.45669231, 0.53314818,
                0.03667885, 0.5209958, 0.60299475, 0.48362392, 0.5055565, 0.28789327,
                0.14834875, 0.27719786, 0.17439932, 0.37907845, 0.55352126, 0.48967436,
                0.28479122, 0.06851044, 0.38110482, 0.38639315, 0.22866697, 0.23182105,
                0.223429, 0.50507813, 0.35202149, 0.1499363, 0.20753399, 0.14207448,
                0.34989875, 0.22257946, 0.45537901, 0.50135254, 0.29391225, 0.08122047,
                0.20341008, 0.23441602, 0.32943985, 0.04479531, 0.48357528, 0.62604443,
                0.32142137, 0.14156601, 0.09169606, 0.2634075, 0.39740182, 0.58125466,
                0.42849209, 0.17960166, 0.5168531, 0.63275551};

        final double[] hilbertTransform_even_O = Hilbert.computeHilbertTransform(signal_even_O);
        final double[] amplitudeEnvelope_even_O = Hilbert.computeSignalEnvelope(hilbertTransform_even_O);
        Assert.assertArrayEquals(result_even_O, amplitudeEnvelope_even_O, 0.0000001);

    }


    /**
     * Tests the amplitude envelope detection of a signal with an odd number of elements (float elements between 0 and 1) using Hilbert Transform.
     */
    @Test
    public void testHilbertOdd() {
        double[] result_odd = {0.92284921, 0.73978489, 0.82167817, 0.69145704, 0.35260138, 0.79354864,
                0.35114428, 0.55425379, 0.24460783, 0.5534595, 0.40100414, 0.7447764,
                0.86272548, 0.70631872, 0.43800283, 0.28166482, 0.70569012, 0.68254045,
                0.1004023, 0.74722023, 0.62210552, 0.38906295, 0.04954815, 0.29797862,
                0.2439525, 0.7554979, 0.26225389, 0.54533132, 0.43505221, 0.28252352,
                0.57272528, 0.46952023, 0.19185138, 0.88540907, 0.52558029, 0.48335317,
                0.64835065, 0.12626951, 0.45759892, 0.47342416, 0.62405733, 1.05242015,
                0.80022206, 0.36981644, 0.91271038, 0.85293021, 0.42006538, 0.31073867,
                0.13047439, 0.75886203, 0.93998245, 0.37597016, 0.49812594, 0.98218585,
                1.07237728, 0.30118876, 0.74612751, 0.38618038, 0.28149774, 0.56084514,
                0.59143452, 0.3403529, 0.1493119, 0.63162345, 0.91566626, 0.70973122,
                1.00366645, 0.45592293, 0.5440521, 0.86828816, 0.72953676, 0.34011024,
                0.57076002, 0.13429071, 0.83343323, 0.37696118, 0.65519035, 0.59375072,
                0.49979384, 0.90475821, 0.42262204, 0.95837684, 0.89323317, 0.67146466,
                0.3825281, 0.37241866, 0.84273144, 0.5883276, 0.07367349, 0.31892184,
                0.54029287, 1.04132551, 0.95279033, 0.37639922, 0.28436925, 0.74025356,
                0.7622309, 0.62878396, 0.94555048, 0.96593241, 0.56773733};

        final double[] hilbertTransform_odd = Hilbert.computeHilbertTransform(signal_odd);
        final double[] amplitudeEnvelope_odd = Hilbert.computeSignalEnvelope(hilbertTransform_odd);
        Assert.assertArrayEquals(result_odd, amplitudeEnvelope_odd, 0.0000001);

    }


    /**
     * Tests the amplitude envelope detection of a signal with an odd number of elements (float elements between -0.5 and 0.5) using Hilbert Transform.
     */
    @Test
    public void testHilbertOddO() {
        double[] result_odd_O = {0.15457333, 0.23985708, 0.01208026, 0.20992706, 0.24828206, 0.37038268,
                0.31845783, 0.2058898, 0.28160565, 0.38083406, 0.27624767, 0.2670699,
                0.34860175, 0.41628067, 0.40173594, 0.18838621, 0.24190155, 0.62114348,
                0.77968526, 0.39668258, 0.49965226, 0.86577655, 0.54971152, 0.13988451,
                0.47323135, 0.27501538, 0.3228912, 0.64247754, 0.70527971, 0.45683116,
                0.33260145, 0.56311281, 0.44771578, 0.27210187, 0.23360914, 0.32868547,
                0.5144853, 0.33347152, 0.06486783, 0.17478311, 0.42318682, 0.41668689,
                0.28332869, 0.35802216, 0.53746067, 0.49714744, 0.44047128, 0.44430921,
                0.39424887, 0.42822969, 0.39282228, 0.21923367, 0.12158931, 0.14644904,
                0.45310208, 0.80535374, 0.55045974, 0.50784507, 0.58064837, 0.4338981,
                0.31459673, 0.16570061, 0.45438133, 0.45570688, 0.31217267, 0.33172457,
                0.43659579, 0.40079423, 0.33830908, 0.21726426, 0.18281502, 0.51006875,
                0.50543562, 0.40220821, 0.31409457, 0.12140592, 0.39564882, 0.09212696,
                0.49402657, 0.57252463, 0.15806015, 0.22321046, 0.24675505, 0.16512462,
                0.11392897, 0.23541825, 0.40774811, 0.45063921, 0.40644004, 0.47385469,
                0.51724964, 0.24457268, 0.23915614, 0.48947546, 0.28275201, 0.23057177,
                0.54174193, 0.60100226, 0.50511924, 0.46790127, 0.24542498};

        final double[] hilbertTransform_odd_O = Hilbert.computeHilbertTransform(signal_odd_O);
        final double[] amplitudeEnvelope_odd_O = Hilbert.computeSignalEnvelope(hilbertTransform_odd_O);
        Assert.assertArrayEquals(result_odd_O, amplitudeEnvelope_odd_O, 0.0000001);

    }


    @Test
    public void testNullInputSignal() {
        boolean testFailed = true;
        try {
            Hilbert.computeHilbertTransform(null);
        } catch (NullPointerException e) {
            testFailed = false;
        }
        assert !testFailed;
    }

    @Test
    public void testNullEnvelope() {
        boolean testFailed = true;
        try {
            Hilbert.computeSignalEnvelope(null);
        } catch (NullPointerException e) {
            testFailed = false;
        }
        assert !testFailed;
    }


}
