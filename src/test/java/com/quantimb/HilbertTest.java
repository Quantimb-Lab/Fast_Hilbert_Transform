package com.quantimb;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class HilbertTest {

  private double[] signal1 = {1.   ,  0.702, -0.168, -1.023, -1.148, -0.311,  0.884,  1.373,
      0.596, -0.816, -1.471, -0.607,  0.939,  1.461,  0.303, -1.208,
      -1.219,  0.301,  1.374,  0.576, -0.957, -1.051,  0.363,  1.12 ,
      0.127, -0.955, -0.418,  0.723,  0.534, -0.526, -0.542,  0.397,
      0.499, -0.337, -0.438,  0.332,  0.372, -0.373, -0.292,  0.449,
      0.172, -0.541,  0.026,  0.593, -0.322, -0.502,  0.666,  0.152,
      -0.866,  0.454,  0.633, -1.021,  0.16 ,  0.984, -1.083, -0.023,
      1.18 , -1.191,  0.035,  1.193, -1.382,  0.397,  0.909, -1.499,
      0.979,  0.202, -1.196,  1.392, -0.759, -0.245,  1.033, -1.238,
      0.852, -0.146, -0.529,  0.912, -0.921,  0.63 , -0.196, -0.221,
      0.512, -0.635,  0.602, -0.459,  0.258, -0.046, -0.147,  0.304,
      -0.418,  0.49 , -0.524,  0.525, -0.497,  0.446, -0.377,  0.296,
      -0.207,  0.116, -0.028, -0.053,  0.123, -0.176,  0.21 , -0.219,
      0.201, -0.15 ,  0.063,  0.061, -0.224,  0.422, -0.646,  0.884,
      -1.115,  1.311, -1.442,  1.475, -1.384,  1.154, -0.791,  0.328,
      0.177, -0.641,  0.978, -1.112,  1.007, -0.681,  0.214,  0.268,
      -0.626,  0.755, -0.62 ,  0.281,  0.13 , -0.449,  0.548, -0.388,
      0.045,  0.314, -0.498,  0.387, -0.017, -0.402,  0.573, -0.315,
      -0.248,  0.686, -0.566, -0.122,  0.804, -0.758};
  @Test
  public void testHilbert() {
    double[] result = {1.1989, 1.1646, 0.9854, 1.2155, 1.2632, 1.2619, 1.3624, 1.3877, 1.4103,
        1.4623, 1.4759, 1.4838, 1.5007, 1.5, 1.4901, 1.4781, 1.4527, 1.418, 1.3851, 1.3462, 1.2931,
        1.2382, 1.1861, 1.1246, 1.059, 1.0026, 0.9422, 0.8706, 0.8107, 0.7666, 0.7117, 0.6481,
        0.6086, 0.5892, 0.5551, 0.5122, 0.4989, 0.5134, 0.5152, 0.4998, 0.506, 0.5515, 0.5998,
        0.6217, 0.6364, 0.6873, 0.7724, 0.8448, 0.8804, 0.9095, 0.9753, 1.0734, 1.1601, 1.206,
        1.2227, 1.2531, 1.3229, 1.4084, 1.468, 1.4808, 1.4591, 1.4413, 1.457, 1.4992, 1.5359,
        1.5358, 1.4887, 1.4098, 1.3284, 1.272, 1.2506, 1.2492, 1.2421, 1.2089, 1.1412, 1.0411,
        0.9239, 0.8073, 0.7105, 0.6506, 0.6288, 0.6366, 0.6564, 0.6757, 0.6886, 0.6892, 0.6828,
        0.6647, 0.6416, 0.611, 0.5777, 0.5393, 0.4973, 0.4521, 0.4032, 0.3537, 0.3004, 0.2499,
        0.1999, 0.1657, 0.1525, 0.1763, 0.2291, 0.2971, 0.3801, 0.4681, 0.5672, 0.6678, 0.7801,
        0.8902, 1.0081, 1.1225, 1.2382, 1.3442, 1.4421, 1.5246, 1.5853, 1.6253, 1.6288, 1.6078,
        1.5419, 1.451, 1.3211, 1.1749, 1.0172, 0.8691, 0.7664, 0.7105, 0.7234, 0.7591, 0.7877,
        0.7976, 0.7501, 0.6779, 0.5609, 0.4438, 0.3872, 0.4046, 0.5023, 0.6052, 0.6396, 0.6517,
        0.5744, 0.4889, 0.548, 0.6863, 0.8547, 1.0855, 0.9561, 0.7818};

    final double[] hilbertTransform = Hilbert.computeHilbertTransform(signal1);
    final double[] amplitudeEnvelope = Hilbert.computeSignalEnvelope(hilbertTransform);
    Assertions.assertArrayEquals(result, amplitudeEnvelope, 0.001);
  }

}
